--- sphinxtrain-1.0.8/src/programs/g2p_train/g2p_train.cpp.orig	2012-09-28 23:26:18.000000000 +0200
+++ sphinxtrain-1.0.8/src/programs/g2p_train/g2p_train.cpp	2018-03-10 19:49:09.407123669 +0100
@@ -20,18 +20,18 @@
 #include <fst/script/fst-class.h>
 #include <fst/script/determinize.h>
 #include <fst/script/minimize.h>
-#include <fst/extensions/far/main.h>
+#include <fst/extensions/far/getters.h>
 #include <fst/script/print.h>
 #include <ngram/ngram-shrink.h>
 #include <ngram/ngram-relentropy.h>
-#include <ngram/ngram-seymoreshrink.h>
-#include <ngram/ngram-countprune.h>
+#include <ngram/ngram-seymore-shrink.h>
+#include <ngram/ngram-count-prune.h>
 #include <ngram/ngram-input.h>
 #include <ngram/ngram-make.h>
-#include <ngram/ngram-kneserney.h>
+#include <ngram/ngram-kneser-ney.h>
 #include <ngram/ngram-absolute.h>
 #include <ngram/ngram-katz.h>
-#include <ngram/ngram-wittenbell.h>
+#include <ngram/ngram-witten-bell.h>
 #include <ngram/ngram-unsmoothed.h>
 #include <sphinxbase/err.h>
 #include "M2MFstAligner.hpp"
@@ -47,7 +47,6 @@
 #define keep_symbols true
 #define initial_symbols true
 #define allow_negative_labels false
-#define file_list_input false
 #define key_prefix ""
 #define key_suffix ""
 #define backoff false
@@ -194,12 +193,11 @@
 	osyms->WriteText(prefix+".output.syms");
 
 	string dest = prefix+".fst.txt";
-	ostream *ostrm = new fst::ofstream(dest.c_str());
-	ostrm->precision(9);
-	s::FstClass *fstc = new s::FstClass(out);
-	s::PrintFst(*fstc, *ostrm, dest, isyms, osyms, NULL, acceptor, show_weight_one);
-	ostrm->flush();
-	delete ostrm;
+	fst::ofstream ostrm(dest.c_str());
+	ostrm.precision(9);
+	s::FstClass fstc(*out);
+	s::PrintFst(fstc, ostrm, dest, isyms, osyms, NULL, acceptor, show_weight_one);
+	ostrm.flush();
 }
 
 void train_model(string eps, string s1s2_sep, string skip, int order, string smooth, string prefix, string seq_sep, string prune, double theta, string count_pattern) {
@@ -218,9 +216,13 @@
 
 	// compile strings into a far archive
 	cout << "Compiling symbols into FAR archive..." << endl;
-	fst::FarEntryType fet = fst::StringToFarEntryType(entry_type);
-	fst::FarTokenType ftt = fst::StringToFarTokenType(token_type);
-    fst::FarType fartype = fst::FarTypeFromString(far_type);
+	fst::FarEntryType fet;
+	if (!fst::script::GetFarEntryType(entry_type, &fet))
+		E_FATAL("Unknown or unsupported FAR entry type");
+	fst::FarTokenType ftt;
+	if (!fst::script::GetFarTokenType(token_type, &ftt))
+		E_FATAL("Unknown or unsupported FAR token type");
+    fst::FarType fartype = fst::script::GetFarType(far_type);
 
     delete ingram;
 
@@ -232,7 +234,7 @@
 	                       prefix+".corpus.syms", unknown_symbol,
 	                       keep_symbols, initial_symbols,
 	                       allow_negative_labels,
-	                       file_list_input, key_prefix,
+	                       key_prefix,
 	                       key_suffix);
 
 	//count n-grams
@@ -247,7 +249,7 @@
 	while (!far_reader->Done()) {
 		if (ifst)
 			delete ifst;
-		ifst = far_reader->GetFst().Copy();
+		ifst = far_reader->GetFst()->Copy();
 
 		if (!ifst) {
 			E_FATAL("ngramcount: unable to read fst #%d\n", fstnumber);
@@ -309,7 +311,7 @@
 		ngram.MakeNGramModel();
 		fst = ngram.GetMutableFst();
 	} else if (smooth == "katz") {
-		NGramKatz ngram(fst, backoff, backoff_label,
+		NGramKatz<StdArc> ngram(fst, backoff, backoff_label,
 				norm_eps, check_consistency,
 				bins);
 		ngram.MakeNGramModel();
@@ -355,7 +357,7 @@
 	}
 
 	cout << "Minimizing model..." << endl;
-	MutableFstClass *minimized = new s::MutableFstClass(fst);
+	MutableFstClass *minimized = new s::MutableFstClass(*fst);
 	Minimize(minimized, 0, fst::kDelta);
 	fst = minimized->GetMutableFst<StdArc>();
 
--- sphinxtrain-1.0.8/src/programs/g2p_train/g2p_train.hpp.orig	1970-01-01 01:00:00.000000000 +0100
+++ sphinxtrain-1.0.8/src/programs/g2p_train/g2p_train.hpp	2018-03-10 20:04:49.127112944 +0100
@@ -0,0 +1,54 @@
+/* ====================================================================
+ * Copyright (c) 1995-2012 Carnegie Mellon University.  All rights 
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer. 
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * This work was supported in part by funding from the Defense Advanced 
+ * Research Projects Agency and the National Science Foundation of the 
+ * United States of America, and the CMU Sphinx Speech Consortium.
+ *
+ * THIS SOFTWARE IS PROVIDED BY CARNEGIE MELLON UNIVERSITY ``AS IS'' AND 
+ * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
+ * NOR ITS EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * ====================================================================
+ *
+ */
+
+#ifndef G2P_TRAIN_H_
+#define G2P_TRAIN_H_
+#include <string>
+
+using namespace std;
+
+void split(string input_file, string prefix, int ratio);
+
+void align(string input_file, string prefix, bool seq1_del, bool seq2_del, 
+		int seq1_max, int seq2_max, string seq_sep, string s1s2_sep,
+		string eps, string skip, string seq1in_sep, string seq2in_sep,
+		string s1s2_delim, int iter);
+		
+void train_model(string eps, string s1s2_sep, string skip, int order, 
+		string smooth, string prefix, string seq_sep, string prune, 
+		double theta, string count_pattern);
+
+#endif /* G2P_TRAIN_H_ */
